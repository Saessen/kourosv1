ANCHOR Authentification oAuth

Sur ce projet nous avons mis en place un système d'authenfication via google avec le bundle knpuniversity/oauth2-client-bundle
doc: https://github.com/knpuniversity/oauth2-client-bundle
oauth2 permet de se connecter via les réseaux (linkedin, facebook, google etc)
L'objectif sur Kouros était de faire une identification via google dans le but final est la récupération et la transmission du planning.
Celle ci est possible en passant différent scopes en paramètre.
Pour démarrer il faut créer une appli sur google. Les codes (clientId et clientSecret) étant personnel pour chaque développeurs nous ne pouvons pas laisser les notres.
Il est possible pour tester le projet de créer son appli mais à terme il faudra que celle-ci soit faites spécifiquement par Kouros.
Tout le code est fonctionnel et prêt à l'emploi. Nous avons commenté les lignes car sans le client id et client secret ce sera bloquant.
Il n'y a plus qu'a créer l'appli google renseigner le client id et client secret dans le .env et décommenter les lignes aux endroits indiqués.

1 (déja fait ) installation du bundle composer require knpuniversity/oauth2-client-bundle

2 (déja fait) installation librairie du client oauth, ici google (dans doc voir configuration du client) 
    composer require league/oauth2-google

3 (déja fait)php bin/console make:user + make:entity User pour ajouter image et fullname

4 (déja fait) créer un controller homepage qui permettra d'avoir un lien de connexion

5 création de l'application google, permettra d'avoir des identifiants dont google a besoin pour identifier notre application
Dans la console google devlopers:
 Sur: https://console.cloud.google.com/home/
 Dans API et services -> identifiants -> créer des identifiants ->ID client Oauth
 type d'application = appli web
 nom = ecrire le nom du projet (le nom en lui même n'a pas d'importance c'est surtout pour l'identifier rapidement sur le tableau de bord de la console google)
 uri = http://127.0.0.1:8001 (servira de point d'entrée pour l'authentification)
 uri redirection = http://127.0.0.1:8001/connect/google/check (route post authentification)
 ->créer<-
 La console google a crée notre client et affiche les identifiants a conserver id client et code secret ( attention code perso! Si comme nous vous créer votre api pensez a enlever les codes à la fin)
 code a renseigner dans le .env (ligne 35 et 36)
 Une fois les Id clients enregistrés dans le .env nous pouvons les utiliser sur tout le projet

 6 (déja fait à décommenter )Dans  config-> package -> knpu_oauth2_client.yaml 
 Faire la config: entrer le client , récupération des id du .env et la route de redirection.
 Ici il est possible d'ajouter plusieurs clients (par exemple linkedin etc) en suivant toujours le même fonctionnement 

 7(deja fait )Création du controller = GoogleController.php  qui va gérer les deux routes de connexion:
 celle ou on envoi la personne se connecter a google et celle ou google nous renvoi les infos 
 Si mise en place de plusieurs authentification, créer un controller par client
 Le code écrit dans le controller est dispo sur la doc github.
 La route connectAction est celle utilisée par le bundle, 
 Ensuite connect/ckeck = quand google nous renvoie les infos on regarde si le user est déjà connecté, si c'est le cas on le renvoi sur le dashboard

8(deja fait)Dans src -> new folder: Security->new file: googleAuthenticator.php
Si plusieurs clients oauth il faut créer un fichier par client
Dans ce fichier il y a un construct: clientRegistry c'est le client de oauth, em pour notre base de données et router pour rediriger le user.
Fonctions implémentées: 
    -support= pour vérifier si on est sur la bonne route
    -get credential = récupération du token google
    -get user = dans le token google on récupère des infos du googleUser, on vérifie si le user existe, si pas le cas on le créé, sinon on le retourne directement
    -start = si le user n'est pas connecté on redirige sur le login
    -failure= possibilité d'ajouter un message en cas d'echec de la connexion (non fait)
    -succes = possibilité d'ajouter un message pour signifier la connexion (non fait)

 9 (deja fait a décommenter) créer le guard dans config->package-> security.yaml
 on dit au firewalls lorsque quelqu'un essaie de se connecter sur le projet on déclenche la classe sécurity\googleauthenticator
Si plusieurs clients oauth2 il faut ajouter tous les authenticator et créer un entry point exemple:
         main:
            lazy: true
            provider: app_user_provider
            entry_point: App\Security\GoogleAuthenticator
            guard:
                authenticators:
                    - App\Security\GoogleAuthenticator
                    - App\Security\LinkedinAuthenticator
(c'est ce qu'il faudra faire lorsque le make:auth sera réalisé, c'est le App\Security\AppAuthenticator qui devra être utilisé comme entry_point)

10 (deja fait) Dans template Homepage ajouter le lien vers la connection google: {{ path('connect_google_start')}}

11 dans base.html.twig (déja fait a décommenter): 
ajouter l'image de profil <img src="{{ app.user.image}}" class="photo" alt="Photo de {{ app.user.fullname}}" width="30" height="30" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Photo de {{app.user.email}}"> (ligne 26 à décommenter)
ajouter route logout: {{ path('logout')}} (déja fait à décommenter ligne 27)
dans le dashboard (déja fait): ajouter fullname du user : <p>Bonjour {{app.user.fullname|upper}}!</p> (ligne 13 a décommenter)

12 création d'un template base_non_connecté (déja fait): sur le template de la home page extends cette base la. La base.html.twig sera utilisée si l'utilisateur est connecté

13 A FAIRE il faudra aujouter un make auth, pour ne pas être bloqué par un seul système d'authentification (si l'utilisateur n'a pas de compte google)
POSSIBILITE: il est possible de récupère plus d'informations sur le googleUser en utilisant différents scopes. Doc: https://developers.google.com/identity/protocols/oauth2/scopes
C'est a partir de ces parmaètres qu'il sera possible de récupérer les agendas (qui seront utiliser pour les disponibilités des formateurs)






Graphique: 
            Utilisation ChartJs lien doc: https://www.chartjs.org/docs/latest/charts/bubble.html
            Récupération des données du devis 
            
PDF:
            Utilisation TCPDF lien doc: https://tcpdf.org/

Claendrier: 
            Utilisation Fullcalendar lien doc: https://fullcalendar.io/docs

Search: 
            Création d'un formulaire pour la recherche + création de la fonction dans le repository et appel de celle-ci dans le controleur 

Ckeditor:
            https://github.com/FriendsOfSymfony/FOSCKEditorBundle



